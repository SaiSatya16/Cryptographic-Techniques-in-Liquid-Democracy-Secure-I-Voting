// File: api.py
from flask_restful import Resource, Api, fields, marshal_with, reqparse
from model import *
from werkzeug.exceptions import HTTPException
from flask_cors import CORS
import json
from flask import make_response
from flask_security import auth_required, roles_required
import os
from functools import wraps
from flask import abort
from flask_security import roles_accepted
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
import base64
import boto3 
from Crypto.Util.Padding import unpad
api = Api()
def any_role_required(*roles):
    def wrapper(fn):
        @wraps(fn)
        def decorator(*args, **kwargs):
            if not roles_accepted(*roles):
                abort(403, description="Insufficient permissions")
            return fn(*args, **kwargs)
        return decorator
    return wrapper

#==========================Validation========================================================
class NotFoundError(HTTPException):
    def __init__(self,status_code):
        message = {"error_code":"BE1009","error_message":"Not Found"}
        self.response = make_response(json.dumps(message), status_code)

class BusinessValidationError(HTTPException):
    def __init__(self, status_code, error_code, error_message):
        message = {"error_code":error_code,"error_message":error_message}
        self.response = make_response(json.dumps(message), status_code)


#==============================output fields========================================
scheme_fields = {
    'id': fields.Integer,
    'name': fields.String,
    'description': fields.String
}

vote_filelds = {
    'id': fields.Integer,
    'user_id': fields.Integer,
    'scheme_id': fields.Integer,
    'vote': fields.Boolean
}

#====================Create Scheme and Votes request pares=======================================


create_scheme_parser = reqparse.RequestParser()
create_scheme_parser.add_argument('name')
create_scheme_parser.add_argument('description')



create_vote_parser = reqparse.RequestParser()
create_vote_parser.add_argument('user_id')
create_vote_parser.add_argument('scheme_id')
create_vote_parser.add_argument('vote')


#====================Update Scheme and Votes request pares=======================================

update_scheme_parser = reqparse.RequestParser()
update_scheme_parser.add_argument('name')
update_scheme_parser.add_argument('description')


update_vote_parser = reqparse.RequestParser()
update_vote_parser.add_argument('user_id')
update_vote_parser.add_argument('scheme_id')
update_vote_parser.add_argument('vote')




#=================================Scheme api======================================================


from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import base64

kms = boto3.client('kms', region_name='ap-south-1')
ENCRYPTION_KEY_ID = 'd7026871-8686-436e-9f80-e285c6a7370d' 

# Define a test plaintext
plaintext = "This is a test plaintext."

def get_encryption_key():
    response = kms.generate_data_key(
        KeyId=ENCRYPTION_KEY_ID,  # The ID of the KMS key
        KeySpec='AES_128'  # The desired key specification
    )
    return response['Plaintext']

# Generate a test encryption key
# Generate or retrieve the encryption key
encryption_key = get_encryption_key() # 16-byte key for AES-128

# Encryption function
def encrypt_data(data, key):
    cipher = AES.new(key, AES.MODE_CBC)
    padded_data = pad(data.encode(), AES.block_size, style='x923')
    ciphertext = cipher.encrypt(padded_data)
    iv = base64.b64encode(cipher.iv).decode('utf-8')
    ciphertext = base64.b64encode(ciphertext).decode('utf-8')
    return iv, ciphertext

# Decryption function
def decrypt_data(encrypted_data, iv, key):
    try:
        cipher = AES.new(key, AES.MODE_CBC, base64.b64decode(iv))
        decrypted_data = cipher.decrypt(base64.b64decode(encrypted_data))
        try:
            unpadded_data = unpad(decrypted_data, AES.block_size, style='x923')
            decrypted_string = unpadded_data.decode('utf-8')
            return decrypted_string
        except ValueError as e:
            print(f"Error unpadding decrypted data: {e}")
            return None
    except Exception as e:
        print(f"Error decrypting data: {e}")
        return None

# Encrypt the plaintext
iv, ciphertext = encrypt_data(plaintext, encryption_key)
print(f"Encrypted data: {ciphertext}")
# Decrypt the ciphertext
decrypted_text = decrypt_data(ciphertext, iv, encryption_key)
print(f"Decrypted text: {decrypted_text}")
class SchemeApi(Resource):
    def __init__(self, encryption_key):
        self.encryption_key = encryption_key
    @auth_required('token')
    @any_role_required('admin', 'voter')
    def get(self, id):
        data = []
        schemes = Scheme.query.all()

        for scheme in schemes:
            allowed_to_vote = False
            usercurrentvote = Usercurrentvote.query.filter_by(user_id=id, scheme_id=scheme.id).first()

            if usercurrentvote:
                allowed_to_vote = True

            true_vote_count = 0
            false_vote_count = 0

            # Calculate true and false vote count
            for vote in scheme.votes:
                decrypted_vote = decrypt_data(vote.vote, vote.iv, encryption_key)
                if decrypted_vote == 'true':
                    true_vote_count += 1
                elif decrypted_vote == 'false':
                    false_vote_count += 1

            # Count delegated votes
            user = User.query.get(id)
            for delegatee in user.delegates:
                delegatee_votes = Vote.query.filter_by(user_id=delegatee.delegatee_id, scheme_id=scheme.id).all()
                for delegatee_vote in delegatee_votes:
                    decrypted_vote = decrypt_data(delegatee_vote.vote, delegatee_vote.iv, encryption_key)
                    if decrypted_vote == 'true':
                        true_vote_count += 1
                    elif decrypted_vote == 'false':
                        false_vote_count += 1

            total_votes = true_vote_count + false_vote_count

            # Handle potential division by zero
            if total_votes > 0:
                true_vote_percentage = round((true_vote_count / total_votes) * 100, 2)
                false_vote_percentage = round((false_vote_count / total_votes) * 100, 2)
            else:
                true_vote_percentage = 0
                false_vote_percentage = 0

            data.append({
                'id': scheme.id,
                'name': scheme.name,
                'description': scheme.description,
                'allowed_to_vote': allowed_to_vote,
                'true_vote_percentage': true_vote_percentage,
                'false_vote_percentage': false_vote_percentage
            })

        return data
    
    @marshal_with(scheme_fields)
    @auth_required('token')
    @any_role_required('admin')
    def post(self):
        args = create_scheme_parser.parse_args()
        name = args.get('name', None)
        description = args.get('description', None)
        if not name:
            raise BusinessValidationError(400, "BE1001", "Name is required")
        if not description:
            raise BusinessValidationError(400, "BE1002", "Description is required")
        scheme = Scheme(name=name, description=description)
        db.session.add(scheme)
        db.session.commit()
        scheme = Scheme.query.filter_by(name=name).first()
        s_id = scheme.id

        #query only users with role voter
        users = User.query.filter(User.roles.any(Role.name == 'Voter')).all()
        for user in users:
            usercurrentvote = Usercurrentvote(user_id=user.id, scheme_id=s_id, vote=None)
            db.session.add(usercurrentvote)
        db.session.commit()
        return scheme   
    
    @marshal_with(scheme_fields)
    @auth_required('token')
    @any_role_required('admin')
    def put(self, id):
        args = update_scheme_parser.parse_args()
        name = args.get('name', None)
        description = args.get('description', None)
        scheme = Scheme.query.filter_by(id=id).first()
        if not scheme:
            raise NotFoundError(404)
        if name:
            scheme.name = name
        if description:
            scheme.description = description
        db.session.commit()
        return scheme
    
    @auth_required('token')
    @any_role_required('admin')
    def delete(self, id):
        scheme = Scheme.query.filter_by(id=id).first()
        if not scheme:
            raise NotFoundError(404)
        db.session.query(Vote).filter(Vote.scheme_id == id).delete()
        db.session.query(Usercurrentvote).filter(Usercurrentvote.scheme_id == id).delete()
        db.session.delete(scheme)
        db.session.commit()
        return {'message': 'Scheme deleted successfully'}

#=================================Vote api======================================================
    
class VoteApi(Resource):
    def __init__(self, encryption_key):
        self.encryption_key = encryption_key

    @marshal_with(vote_filelds)
    @auth_required('token')
    @any_role_required('voter')
    def post(self):
        args = create_vote_parser.parse_args()
        user_id = args.get('user_id', None)
        scheme_id = args.get('scheme_id', None)
        vote = args.get('vote', None)
        if not user_id:
            raise BusinessValidationError(400, "BE1003", "User id is required")
        if not scheme_id:
            raise BusinessValidationError(400, "BE1004", "Scheme id is required")
        if vote is None:
            raise BusinessValidationError(400, "BE1005", "Vote is required")
        
        # Generate or retrieve the encryption key
        key = encryption_key
        
        # Encrypt the vote before storing it in the database
        iv, encrypted_vote = encrypt_data(vote, key)

        # iv, ciphertext = encrypt_data(plaintext, key)
        
        vote = Vote(user_id=user_id, scheme_id=scheme_id, vote=encrypted_vote, iv=iv)
        # delete the entry from usercurrentvote table and add the vote to vote table
        user_current_vote = Usercurrentvote.query.filter_by(user_id=user_id, scheme_id=scheme_id).first()
        if user_current_vote:
            db.session.delete(user_current_vote)
            db.session.add(vote)
            db.session.commit()
        else:
            raise BusinessValidationError(400, "BE1006", "User is not allowed to vote")
        return vote 
    

class DelegationApi(Resource):
    def __init__(self):
        self.parser = reqparse.RequestParser()
        self.parser.add_argument('delegator_id', type=int, required=True, help='Delegator user ID is required')
        self.parser.add_argument('delegatee_id', type=int, required=True, help='Delegatee user ID is required')
        self.parser.add_argument('scheme_id', type=int, required=True, help='Scheme ID is required')

    @auth_required('token')
    def post(self):
        args = self.parser.parse_args()
        delegator_id = args['delegator_id']
        delegatee_id = args['delegatee_id']
        scheme_id = args['scheme_id']

        delegator = User.query.get(delegator_id)
        delegatee = User.query.get(delegatee_id)
        scheme = Scheme.query.get(scheme_id)

        if not delegator or not delegatee or not scheme:
            return {'message': 'Invalid user ID(s) or scheme ID'}, 400

        if delegator.is_delegating_to(delegatee, scheme_id):
            return {'message': 'Delegation already exists for this scheme'}, 400

        # Transfer delegator's current vote to delegatee's current vote
        delegator_current_vote = Usercurrentvote.query.filter_by(user_id=delegator_id, scheme_id=scheme.id).first()
        delegatee_current_vote = Usercurrentvote.query.filter_by(user_id=delegatee_id, scheme_id=scheme.id).first()

        if delegator_current_vote:
            if delegatee_current_vote:
                # Create a new current vote record for the delegatee with the delegator's vote
                new_delegatee_vote = Usercurrentvote(user_id=delegatee_id, scheme_id=scheme.id, vote=delegator_current_vote.vote)
                db.session.add(new_delegatee_vote)
            else:
                # Update the delegatee's current vote record with the delegator's vote
                delegatee_current_vote = Usercurrentvote(user_id=delegatee_id, scheme_id=scheme.id, vote=delegator_current_vote.vote)
                db.session.add(delegatee_current_vote)

            # Delete the delegator's current vote record
            db.session.delete(delegator_current_vote)
            db.session.commit()

        delegator.delegate_to(delegatee, scheme_id)
        return {'message': 'Delegation successful'}

    @auth_required('token')
    def delete(self):
        args = self.parser.parse_args()
        delegator_id = args['delegator_id']
        delegatee_id = args['delegatee_id']
        scheme_id = args['scheme_id']

        delegator = User.query.get(delegator_id)
        delegatee = User.query.get(delegatee_id)
        scheme = Scheme.query.get(scheme_id)

        if not delegator or not delegatee or not scheme:
            return {'message': 'Invalid user ID(s) or scheme ID'}, 400

        if not delegator.is_delegating_to(delegatee, scheme_id):
            return {'message': 'No delegation found for this scheme'}, 400

        delegator.undelegate_to(delegatee, scheme_id)
        return {'message': 'Delegation removed successfully'}

    @auth_required('token')
    def get(self, user_id):
        user = User.query.get(user_id)
        if not user:
            return {'message': 'Invalid user ID'}, 400

        delegations = {}
        for scheme in Scheme.query.all():
            delegated_to = user.delegates.filter_by(scheme_id=scheme.id).first()
            if delegated_to:
                delegatee = User.query.get(delegated_to.delegatee_id)
                delegations[scheme.id] = {
                    'delegatee_id': delegatee.id,
                    'delegatee_username': delegatee.username
                }
            else:
                delegations[scheme.id] = {}

        return delegations

#==============================API Endpoints========================================
api.add_resource(SchemeApi, '/scheme', '/scheme/<int:id>', resource_class_kwargs={'encryption_key': encryption_key})
api.add_resource(VoteApi, '/vote', resource_class_kwargs={'encryption_key': encryption_key})
api.add_resource(DelegationApi, '/delegation', '/delegation/<int:user_id>')

// File: app.py
from flask import Flask, render_template ,request,redirect, url_for, jsonify
from model import *
import os
from api import *
from flask_cors import CORS
from config import DevelopmentConfig
from flask_security import Security, SQLAlchemyUserDatastore, UserMixin, RoleMixin, login_required
from flask_security import auth_required, roles_required, current_user
from werkzeug.security import check_password_hash, generate_password_hash
from flask_restful import marshal, fields
from sec import datastore
from PIL import Image
from sqlalchemy.orm.exc import NoResultFound

#==============================configuration===============================
app = Flask(__name__)
app.config.from_object(DevelopmentConfig)
api.init_app(app)
db.init_app(app)
app.security = Security(app, datastore)
app.app_context().push()

@app.route('/')
def index():
    return render_template('index.html')

@app.post('/user-login')
def user_login():
    data = request.get_json()
    email = data.get('email')
    if not email:
        return jsonify({"message": "email not provided"}), 400

    user = datastore.find_user(email=email)

    if not user:
        return jsonify({"message": "User Not Found"}), 404
    
    if not user.active:
        return jsonify({"message": "User Not Activated"}), 400
    

    if check_password_hash(user.password, data.get("password")):
        return jsonify({"token": user.get_auth_token(), "email": user.email, "role": user.roles[0].name, "username": user.username, "id": user.id})
    else:
        return jsonify({"message": "Wrong Password"}), 400
    
@app.post('/user-registration')
def user_registration():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')
    username = data.get('username')
    if not email:
        return jsonify({"message": "email not provided"}), 400
    if not password:
        return jsonify({"message": "password not provided"}), 400
    if not username:
        return jsonify({"message": "username not provided"}), 400
    if datastore.find_user(email=email):
        return jsonify({"message": "User Already Exists"}), 400
    else:
        datastore.create_user(
            username=username,
            email=email,
            password=generate_password_hash(password),
            roles=["Voter"])
        db.session.commit()

        uid = User.query.filter_by(email=email).first().id
        schemes = Scheme.query.all()
        for scheme in schemes:
            usercurrentvote = Usercurrentvote(user_id=uid, scheme_id=scheme.id, vote=None)
            db.session.add(usercurrentvote)
        db.session.commit()
        return jsonify({"message": "Voter Created"}), 201

if __name__ == "__main__":
    app.run(debug=True)

// File: config.py
class Config(object):
    DEBUG = False
    TESTING = False

class DevelopmentConfig(Config):
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///database.sqlite3'
    SECRET_KEY = "thisissecter1"
    SECURITY_PASSWORD_SALT = "thisissaltt1"
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    WTF_CSRF_ENABLED = False
    SECURITY_TOKEN_AUTHENTICATION_HEADER = 'Authentication-Token'
    CACHE_TYPE = "RedisCache"
    CACHE_REDIS_HOST = "localhost"
    CACHE_REDIS_PORT = 6379
    CACHE_REDIS_DB = 3

// File: model.py
from flask_sqlalchemy import SQLAlchemy
from flask_security import UserMixin, RoleMixin

db = SQLAlchemy()
class RolesUsers(db.Model):
    __tablename__ = 'roles_users'
    id = db.Column(db.Integer(), primary_key=True)
    user_id = db.Column('user_id', db.Integer(), db.ForeignKey('user.id'))
    role_id = db.Column('role_id', db.Integer(), db.ForeignKey('role.id'))

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String, unique=False)
    email = db.Column(db.String, unique=True)
    password = db.Column(db.String(255))
    active = db.Column(db.Boolean())
    fs_uniquifier = db.Column(db.String(255), unique=True, nullable=False)
    roles = db.relationship('Role', secondary='roles_users', backref=db.backref('users', lazy='dynamic'))
    currentvote = db.relationship('Usercurrentvote', backref='user', lazy='dynamic')

    # Delegation relationship
    delegates = db.relationship('Delegation',
                                foreign_keys='Delegation.delegator_id',
                                backref='delegator',
                                lazy='dynamic')

    def delegate_to(self, user, scheme_id):
        if not self.is_delegating_to(user, scheme_id):
            delegation = Delegation(delegator_id=self.id, delegatee_id=user.id, scheme_id=scheme_id)
            db.session.add(delegation)
            db.session.commit()

    def is_delegating_to(self, user, scheme_id):
        return self.delegates.filter_by(delegatee_id=user.id, scheme_id=scheme_id).count() > 0

    def undelegate_to(self, user, scheme_id):
        delegation = self.delegates.filter_by(delegatee_id=user.id, scheme_id=scheme_id).first()
        if delegation:
            db.session.delete(delegation)
            db.session.commit()

class Role(db.Model, RoleMixin):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String, nullable=False, unique=True)
    description = db.Column(db.String, nullable=False)


class Scheme(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), unique=True)
    description = db.Column(db.String(255))
    votes = db.relationship('Vote', backref='scheme', lazy='dynamic')

class Vote(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    scheme_id = db.Column(db.Integer, db.ForeignKey('scheme.id'))
    vote = db.Column(db.String(32), nullable=False)
    iv = db.Column(db.String(32), nullable=False)

class Usercurrentvote(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    scheme_id = db.Column(db.Integer, db.ForeignKey('scheme.id'))
    vote = db.Column(db.Boolean)

class Delegation(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    delegator_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    delegatee_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    scheme_id = db.Column(db.Integer, db.ForeignKey('scheme.id'), nullable=False)


// File: sec.py
from flask_security import Security, SQLAlchemyUserDatastore, UserMixin, RoleMixin, login_required
from model import db, User, Role
datastore = SQLAlchemyUserDatastore(db, User, Role)
// File: upload_initial_data.py
from app import app
from sec import datastore
from model import db
from flask_security import hash_password
from werkzeug.security import generate_password_hash


with app.app_context():
    db.create_all()
    datastore.find_or_create_role(name="Admin", description="user is Admin")
    datastore.find_or_create_role(name="Voter", description="user is Voter")
    db.session.commit()
    if not datastore.find_user(email="admin@gmail.com"):
        datastore.create_user(
            username="admin",
            email="admin@gmail.com",
            password= generate_password_hash("admin"),
            roles=["Admin"])
    if not datastore.find_user(email="voter1@gmail.com"):
        datastore.create_user(
            username="voter1",
            email="voter1@gmail.com",
            password=generate_password_hash("voter1"),
            roles=["Voter"])
    db.session.commit()

// File: static/vue/components/about.js
const About = Vue.component("about", {
    template:  `<div class="container mt-5">
                    <div class="alert alert-info" role="alert">
                        <h4 class="alert-heading">Page is coming soon, stay tuned!</h4>
                        <p>We're working on something awesome. Please check back later.</p>
                    </div>
                </div>`,
});

export default About;

// File: static/vue/components/adminhome.js
const Adminhome = Vue.component("adminhome", {
    template:  
    `
    <div class="main-container pb-5">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                <!-- Welcome Message -->
                    <div class="jumbotron pt-3 pb-3">
                        <h1 class="display-4 greeting">Welcome, {{username}}!</h1>
                        <p class="scope">You can Create, Edit, Delete Schemes</p>
                        <button class="add-course-btn" data-bs-toggle="modal" data-bs-target="#addSchemeModal">Add Scheme
                            <i class="fa fa-plus" aria-hidden="true"></i>
                        </button>
                    </div>
                    <div class="alert alert-danger" v-if="error">
                    {{ error }}
                    </div>
                    <div class="mt-4">
                    <div v-if="schemes.length == 0">
                        <p class="text-center">No schemes available</p>
                    </div>
                    <div v-else>
                        <h2>Schemes</h2>
                        <ul class="list-group">
                            <li class="list-group-item" v-for="scheme in schemes" :key="scheme.id">
                            <h5>{{ scheme.name }}</h5>
                            <p muted>{{ scheme.description }}</p>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-outline-secondary" :data-bs-target="'#editSchemeModal' + scheme.id" data-bs-toggle="modal">Edit</button>
                                <button type="button" class="btn btn-sm btn-outline-danger" @click="deleteScheme(scheme.id)">Delete</button>
                            </div>
                            <div class="progress mt-3">
                                  <div class="progress-bar bg-success" role="progressbar" :style="'width:' + scheme.true_vote_percentage + '%'">
                                    <span>{{ scheme.true_vote_percentage }}%</span>
                                  </div>
                                  <div class="progress-bar bg-danger" role="progressbar" :style="'width:' + scheme.false_vote_percentage + '%'">
                                    <span>{{ scheme.false_vote_percentage }}%</span>
                                  </div>
                            </div>
                            </li>
                        </ul>
                        </div>
                        </div>
                </div> 
             </div> 
          </div> 

          <div class="modal fade" id="addSchemeModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="addSchemeModalLabel" aria-hidden="true">
          <div class="modal-dialog">
             <div class="modal-content">
                <div class="modal-header">
                   <h1 class="modal-title fs-5" id="addSchemeModalLabel">Add Course</h1>
                   <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                   <div class="my-3">
                      <label for="roomname">Enter Scheme Name</label>
                      <input v-model="scheme_name" type="text" id="scheme_name" class="form-control" placeholder="Scheme Name">
                   </div>
                   <div class="my-3">
                      <label for="scheme_description">Enter Scheme Description</label>
                      <textarea v-model="scheme_description" class="form-control"></textarea>
                   </div>
                </div>
                <div class="modal-footer">
                   <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                   <button type="button" @click="addScheme" class="btn btn-primary" data-bs-dismiss="modal">Submit</button>
                </div>
             </div>
          </div>
       </div>

        <div v-for="scheme in schemes" :key="scheme.id" class="modal fade" :id="'editSchemeModal' + scheme.id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="editSchemeModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="editSchemeModalLabel">Edit Scheme</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="my-3">
                            <label for="roomname">Enter Scheme Name</label>
                            <input v-model="scheme.name" type="text" id="scheme_name" class="form-control" placeholder="Scheme Name">
                        </div>
                        <div class="my-3">
                            <label for="scheme_description">Enter Scheme Description</label>
                            <textarea v-model="scheme.description" class="form-control"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" @click="editScheme(scheme)" class="btn btn-primary" data-bs-dismiss="modal">Submit</button>
                    </div>
                </div>
            </div>
        </div>
          </div> 
    `,

    data () {
        return {
            userRole: localStorage.getItem("role"),
            token: localStorage.getItem("auth-token"),
            username: localStorage.getItem("username"),
            user_id: localStorage.getItem("id"),
            error: null,
            schemes: [],
            scheme_name: null,
            scheme_description: null,
        }
    },

    methods: {

        async getschemes() {
            const res = await fetch("/scheme/"+ this.user_id, {
              method: "GET",
              headers: {
                "Content-Type": "application/json",
                "Authentication-Token": this.token,
                "Authentication-Role": this.userRole,
              },
            });
            if (res.ok) {
              const data = await res.json();
              console.log(data);
              this.schemes = data;
            } else {
              const data = await res.json();
              console.log(data);
              this.error = data.error_message;
            }
          },

        async addScheme() {
            const res = await fetch("/scheme", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authentication-Token": this.token,
                "Authentication-Role": this.userRole,
            },
            body: JSON.stringify({
                name: this.scheme_name,
                description: this.scheme_description,
            }),
            });
            if (res.ok) {
            this.getschemes();
            } else {
            const data = await res.json();
            console.log(data);
            this.error = data.error_message;
            }
        },
        async deleteScheme(id) {
            const res = await fetch("/scheme/" + id, {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
                "Authentication-Token": this.token,
                "Authentication-Role": this.userRole,
            },
            });
            if (res.ok) {
            this.getschemes();
            } else {
            const data = await res.json();
            console.log(data);
            this.error = data.error_message;
            }
        },
        async editScheme(scheme) {
            const res = await fetch("/scheme/" + scheme.id, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authentication-Token": this.token,
                "Authentication-Role": this.userRole,
            },
            body: JSON.stringify({
                name: scheme.name,
                description: scheme.description,  
            }),
            });
            if (res.ok) {
            this.getschemes();
            } else {
            const data = await res.json();
            console.log(data);
            this.error = data.error_message;
            }
        }
    },

    mounted: function () {
        this.getschemes();
        document.title = "Admin Home";
    },
});

export default Adminhome;
// File: static/vue/components/home.js
import Adminhome from "./adminhome.js";
import Voterhome from "./voterhome.js";


const Home = Vue.component("home", {
    template:  
    `
    <div>
        <div v-if="role === 'Admin'">
            <Adminhome></Adminhome>
        </div>
        <div v-if="role === 'Voter'">
            <Voterhome></Voterhome>
        </div>
    </div>
    `,

    data() {
        return {
            role: localStorage.getItem('role'),
        };
    },
    components: {
        Adminhome,
        Voterhome,
    },

    mounted() {
        Document.title = "Home";
    }
});
export default Home;

// File: static/vue/components/login.js
const Login = Vue.component("login", {
  template: `
  <div class="main-container d-flex flex-column justify-content-center">
  <div class="container">
    <div class="row justify-content-center">
      <div class="form-container col-md-6 p-5">
        <h2 class="text-center">Login</h2>
        <div class="alert alert-danger" v-if="error">
          {{ error }}
        </div>
          <div class="form-group p-1">
            <label for="email">Email:</label>
            <input class="input-field" type="text" class="form-control login-input" id="username" name="username" placeholder="Enter email"
            v-model="cred.email">
          </div>
          <div class="form-group p-1">
            <label for="password">Password:</label>
            <input type="password" class="form-control mb-2" id="password" name="password" placeholder="Enter password"
            v-model="cred.password">
          </div>
          <div class="d-flex flex-row">
          <button class="button-86" type="submit" role="button" @click='login'>Login</button>
          </div>
          <p class="mt-3">Don't have an account? <router-link to="/register">Register as Voter here</router-link></p>
      </div>
    </div>
  </div>
  </div>`,
  data() {
    return {
      cred: {
        email: null,
        password: null,
      },
      error: null,
    };
  },
  methods: {
    async login() {
      const res = await fetch("/user-login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(this.cred),
      });
      if (res.ok) {
        const data = await res.json();
        console.log(data);
        localStorage.setItem("auth-token", data.token);
        localStorage.setItem("role", data.role);
        localStorage.setItem("id", data.id);
        localStorage.setItem("username", data.username);
        this.$router.push("/");
      } else {
        const data = await res.json();
        console.log(data);
        this.error = data.message;
      }
    },
  },
  mounted: function () {
    document.title = "Login";
  },
});

export default Login;

// File: static/vue/components/navbar.js
const Navbar = Vue.component("Navbar", {
    template: `
  
    <nav class="navbar navbar-expand-lg sticky-top border-bottom navbar-container">
    <div class="container">
      <a class="navbar-brand" href="/">
        <span class="navbar-head">LIQUID DEMOCRACY</span>
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item active mr-3">
            <a class="nav-link" href="/#/" style="display: flex; flex-direction: column; align-items: center; text-align: center;">
              <i class="fas fa-home fa-lg text-center" style="color: black"></i>
              <router-link class="menutext mt-2" to="/">Home</router-link>
            </a>
          </li>
          <li class="nav-item mr-3">
            <a class="nav-link" href="/#/about" style="display: flex; flex-direction: column; align-items: center; text-align: center;">
              <i class="fas fa-info-circle fa-lg text-center" style="color: black"></i>
              <div class="menutext mt-2"><router-link class="menutext mt-2" to="/about">About Us</router-link></div>
            </a>
          </li>
          <li class="nav-item logout-thor mr-3">
            <a @click='logout' class="nav-link active d-lg-block" style="display: flex; flex-direction: column; align-items: center; text-align: center; border: none; background: none;">
                <i class="fas fa-sign-out-alt fa-lg text-center" style="color: black"></i>
              <div class="menutext">Logout</div>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>
    `,
    data() {
      return {
        role: localStorage.getItem("role"),
        is_login: localStorage.getItem("auth-token"),
        id: localStorage.getItem("id"),
        inactivityTimeout: 5 * 60 * 1000, // 30 minutes in milliseconds
        inactivityTimer: null,
      };
    },
    methods: {
      logout() {
        localStorage.removeItem("auth-token");
        localStorage.removeItem("role");
        localStorage.removeItem("id");
        localStorage.removeItem("username");
        this.$router.push({ path: "/login" });
      },
      handleUserActivity() {
        // Update the last activity timestamp
        localStorage.setItem("lastActivityTimestamp", Date.now().toString());
      },
      checkInactivity() {
        const lastActivityTimestamp = localStorage.getItem(
          "lastActivityTimestamp"
        );
        const currentTime = Date.now();
  
        if (
          lastActivityTimestamp &&
          currentTime - lastActivityTimestamp > this.inactivityTimeout
        ) {
          // User has been inactive for too long, clear local storage
          this.clearLocalStorage();
        }
      },
      clearLocalStorage() {
        localStorage.removeItem("auth-token");
        localStorage.removeItem("role");
        this.$router.push({ path: "/login" });
      },
      startInactivityTimer() {
        this.inactivityTimer = setInterval(() => {
          this.checkInactivity();
        }, 60000); // Check every minute (adjust as needed)
      },
      stopInactivityTimer() {
        clearInterval(this.inactivityTimer);
      },
    },
    mounted() {
      // Set up event listeners to track user activity
      document.addEventListener("mousemove", this.handleUserActivity);
      document.addEventListener("keydown", this.handleUserActivity);
      document.title = "Navbar";
  
      // Start the inactivity timer
      this.startInactivityTimer();
    },
    beforeDestroy() {
      // Clean up event listeners and the inactivity timer
      document.removeEventListener("mousemove", this.handleUserActivity);
      document.removeEventListener("keydown", this.handleUserActivity);
      this.stopInactivityTimer();
    },
  });
  
  export default Navbar;
  
// File: static/vue/components/registration.js
// Assuming you already have Vue imported and set up

const Registration = Vue.component('registration', {
    template: `<div class="container">
      <div class="row justify-content-center">
        <div class="col-md-6">
          <h2 class="text-center">Registration Form</h2>
          <div class="alert alert-danger" v-if="error">
            {{ error }}
          </div>
          <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" class="form-control" id="username" name="username" placeholder="Enter username"
              v-model="user.username">
          </div>
          <div class="form-group">
            <label for="email">Email:</label>
            <input type="text" class="form-control" id="email" name="email" placeholder="Enter email"
              v-model="user.email">
          </div>
          <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" class="form-control" id="password" name="password" placeholder="Enter password"
              v-model="user.password">
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password:</label>
            <input type="password" class="form-control" id="confirmPassword" name="confirmPassword"
              placeholder="Confirm password" v-model="user.confirmPassword">
          </div>
          <button type="submit" class="btn btn-primary" @click="register">Register</button>
          <p class="mt-3">Already have an account? <router-link to="/login">Login here</router-link></p>
        </div>
      </div>
    </div>`,
    data() {
      return {
        user: {
          username: null,
          email: null,
          password: null,
          confirmPassword: null,
        },
        error: null,
      };
    },
    methods: {
      async register() {
        if (this.user.password !== this.user.confirmPassword) {
          this.error = "Passwords do not match.";
          return;
        }
  
        const res = await fetch('/user-registration', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            username: this.user.username,
            email: this.user.email,
            password: this.user.password,
          }),
        });
  
        if (res.ok) {
          this.$router.push('/login');

        } else {
          const data = await res.json();
          this.error = data.message;

        }
      },
    },
    mounted: function () {
      document.title = 'Registration';
    },
  });
  export default Registration;
  
// File: static/vue/components/voterhome.js
const Voterhome = Vue.component("adminhome", {
    template:  
    ` <div class="main-container pb-5">
    <div class="container">
      <div class="row">
        <div class="col-lg-8 offset-lg-2">
          <div class="jumbotron pt-3 pb-3">
            <h1 class="display-4 greeting">Welcome, {{ username }}!</h1>
          </div>
          <div class="alert alert-danger" v-if="error">
            {{ error }}
          </div>
          <div class="mt-2">
            <div v-if="schemes.length == 0">
              <p class="text-center">No schemes available</p>
            </div>
            <div v-else>
              <h2>Available Schemes</h2>
              <ul class="list-group">
                <li
                  class="list-group-item"
                  v-for="scheme in schemes"
                  :key="scheme.id"
                >
                  <h5>{{ scheme.name }}</h5>
                  <p muted>{{ scheme.description }}</p>
                  <div v-if="scheme.allowed_to_vote">
                    <div class="btn-group" role="group">
                      <div class="form-check form-check-inline">
                        <input
                          class="form-check form-check-inline"
                          type="radio"
                          :name="'agree' + scheme.id"
                          :id="'agree' + scheme.id"
                          value="true"
                          v-model="scheme.Vote"
                        />
                        <label
                          class="form-check form-check-inline"
                          :for="'agree' + scheme.id"
                          >Agree</label
                        >

                        <input
                          class="form-check form-check-inline"
                          type="radio"
                          :name="'disagree' + scheme.id"
                          :id="'disagree' + scheme.id"
                          value="false"
                          v-model="scheme.Vote"
                        />
                        <label
                          class="form-check form-check-inline"
                          :for="'disagree' + scheme.id"
                          >Disagree</label
                        >

                        <button
                          type="button"
                          class="btn btn-sm btn-outline-primary"
                          @click="vote(scheme)"
                        >
                          Vote
                        </button>
                      </div>
                    </div>
                  </div>
                  <div v-else>
                    <div class="progress">
                      <div
                        class="progress-bar bg-success"
                        role="progressbar"
                        :style="'width:' + scheme.true_vote_percentage + '%'"
                      >
                        <span>{{ scheme.true_vote_percentage }}%</span>
                      </div>
                      <div
                        class="progress-bar bg-danger"
                        role="progressbar"
                        :style="'width:' + scheme.false_vote_percentage + '%'"
                      >
                        <span>{{ scheme.false_vote_percentage }}%</span>
                      </div>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
          <div class="mt-4">
            <h2>Delegation</h2>
            <div v-for="scheme in schemes" :key="scheme.id">
              <h4>{{ scheme.name }}</h4>
              <div v-if="!scheme.delegatedTo">
                <p>You haven't delegated your vote for this scheme.</p>
                <div class="form-group">
                  <label for="delegateeId">Delegate to:</label>
                  <input
                    type="text"
                    class="form-control"
                    :id="'delegateeId-' + scheme.id"
                    v-model="delegateeId"
                    placeholder="Enter user ID"
                  />
                  <button class="btn btn-primary mt-2" @click="delegateVote(scheme)">
                    Delegate Vote
                  </button>
                </div>
              </div>
              <div v-else>
                <p>
                  You have delegated your vote for this scheme to
                  {{ scheme.delegatedToUsername }} (User ID: {{ scheme.delegatedTo }}).
                </p>
                <button class="btn btn-danger" @click="undelegateVote(scheme)">
                  Undelegate Vote
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
    `,
    data() {
      return {
        userRole: localStorage.getItem("role"),
        token: localStorage.getItem("auth-token"),
        username: localStorage.getItem("username"),
        user_id: localStorage.getItem("id"),
        error: null,
        schemes: [],
        delegatedTo: null,
        delegatedToUsername: null,
        delegateeId: null,
        schemeDelegations: {},
      };
    },
    methods: {
      async getschemes() {
        const res = await fetch("/scheme/" + this.user_id, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "Authentication-Token": this.token,
            "Authentication-Role": this.userRole,
          },
        });
        if (res.ok) {
          const data = await res.json();
          console.log(data);
          this.schemes = data;
        } else {
          const data = await res.json();
          console.log(data);
          this.error = data.error_message;
        }
      },
  
      async vote(scheme) {
        const res = await fetch("/vote", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authentication-Token": this.token,
            "Authentication-Role": this.userRole,
          },
          body: JSON.stringify({
            scheme_id: scheme.id,
            user_id: this.user_id,
            vote: scheme.Vote,
          }),
        });
        if (res.ok) {
          this.getschemes();
        } else {
          const data = await res.json();
          console.log(data);
          this.error = data.error_message;
        }
      },
  
      async getDelegation() {
        const res = await fetch(`/delegation/${this.user_id}`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "Authentication-Token": this.token,
            "Authentication-Role": this.userRole,
          },
        });
        if (res.ok) {
          const data = await res.json();
          this.schemeDelegations = data;
        } else {
          const data = await res.json();
          console.log(data);
          this.error = data.error_message;
        }
      },
      async delegateVote(scheme) {
        const res = await fetch("/delegation", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authentication-Token": this.token,
            "Authentication-Role": this.userRole,
          },
          body: JSON.stringify({
            delegator_id: this.user_id,
            delegatee_id: this.delegateeId,
            scheme_id: scheme.id,
          }),
        });
        if (res.ok) {
          this.getDelegation();
          this.getschemes();
        } else {
          const data = await res.json();
          console.log(data);
          this.error = data.error_message;
        }
      },
      async undelegateVote() {
        const res = await fetch("/delegation", {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
            "Authentication-Token": this.token,
            "Authentication-Role": this.userRole,
          },
          body: JSON.stringify({
            delegator_id: this.user_id,
            delegatee_id: this.delegatedTo,
          }),
        });
        if (res.ok) {
          this.delegatedTo = null;
          this.delegatedToUsername = null;
        } else {
          const data = await res.json();
          console.log(data);
          this.error = data.error_message;
        }
      },
    },
    mounted() {
      this.getschemes();
      this.getDelegation();
      Document.title = "Voter Home";
    },
});

export default Voterhome;
// File: static/vue/index.js
import router from "./router.js"
import Navbar from "./components/navbar.js"

router.beforeEach((to, from, next) => {
    if (to.name !== 'Login' && to.name !== 'Register' &&  !localStorage.getItem('auth-token') ? true : false)
      next({ name: 'Login' })
    else next()
  })
new Vue ({
    el: '#app',
    template: `<div>
    <Navbar :key='has_changed'/>
    <router-view/></div>`,
    router,
    components: {
        Navbar,
      },
    data: {
        has_changed: true,
    },
    watch: {
        $route(to, from) {
          this.has_changed = !this.has_changed
        },
      },
})

// File: static/vue/router.js
import Home from './components/home.js';
import About from './components/about.js';
import Registration from './components/registration.js';
import Login from './components/login.js';
const routes = [
    {
        path: '/',
        component: Home,
        name: 'Home'
    },
    {
        path: '/about',
        component: About,
        name: 'About'
    },
    {
        path: '/register',
        component: Registration,
        name: 'Register'
    },
    {
        path: '/login',
        component: Login,
        name: 'Login'
    },
    {
        path: "*",
        redirect: "/"
    }
];

const router = new VueRouter({
    routes,
});
export default router;
// File: templates/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>LIQUID DEMOCRACY</title>
    <link href="https://fonts.cdnfonts.com/css/mystical" rel="stylesheet">    
    <link rel="stylesheet" href="{{url_for('static', filename='style.css')}}">
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />
     <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.1/css/all.css"
        integrity="sha384-vp86vTRFVJgpjF9jiIGPEEqYqlDwgyBgEF109VFjmqGmIY/Y4HV4d3Gp2irVfcrp" crossorigin="anonymous"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.18.0/font/bootstrap-icons.css">
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Poppins&display=swap');
  </style>
  </head>
  <body>
    <div id="app"></div>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.7.16"></script>
    <script src="https://unpkg.com/vue-router@3.0.0/dist/vue-router.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.3.2/socket.io.js"></script>
    <script
      src="{{url_for('static', filename='vue/index.js')}}"
      type="module"
    ></script>
    <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
    crossorigin="anonymous"
  ></script>
   </body>
</html>

